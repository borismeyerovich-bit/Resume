"use client";

import { useState, useMemo } from 'react';
import { AmericanizedResume } from '../../entities/Resume';
import SectionEditor from './SectionEditor';
import PDFExportButton from './PDFExportButton';
import { getCompactFontSizing, FontSizingConfig } from '../../utils/fontSizing';

interface ResumeEditorProps {
  resume: AmericanizedResume;
  onResumeUpdate: (resume: AmericanizedResume) => void;
}

export default function ResumeEditor({ resume, onResumeUpdate }: ResumeEditorProps) {
  const [sectionOrder, setSectionOrder] = useState<string[]>([
    'personal_info',
    'summary',
    'education',
    'work_experience',
    'skills',
    'other'
  ]);

  // Calculate optimal font sizing based on content
  const fontConfig: FontSizingConfig = useMemo(() => {
    return getCompactFontSizing(resume);
  }, [resume]);

  // Ensure all required arrays exist with default empty arrays
  const safeResume = {
    personal_info: resume?.personal_info || { name: '', email: '', phone: '', location: '', linkedin: '', website: '' },
    professional_summary: resume?.summary || '',
    work_experience: resume?.work_experience || [],
    education: resume?.education || [],
    technical_skills: resume?.skills || [],
    other: resume?.other || [],
  };

  const handleSectionUpdate = (sectionType: string, data: any) => {
    const updatedResume = {
      ...safeResume,
      [sectionType]: data
    };
    onResumeUpdate(updatedResume);
  };

  const handleSectionDelete = (sectionType: string, index: number) => {
    const updatedResume = { ...safeResume };
    if (sectionType === 'work_experience') {
      updatedResume.work_experience = updatedResume.work_experience.filter((_, i) => i !== index);
    } else if (sectionType === 'education') {
      updatedResume.education = updatedResume.education.filter((_, i) => i !== index);
    } else if (sectionType === 'other') {
      updatedResume.other = updatedResume.other.filter((_, i) => i !== index);
    }
    onResumeUpdate(updatedResume);
  };

  const toggleSectionOrder = () => {
    const newOrder = [...sectionOrder];
    const educationIndex = newOrder.indexOf('education');
    const experienceIndex = newOrder.indexOf('work_experience');
    
    if (educationIndex !== -1 && experienceIndex !== -1) {
      [newOrder[educationIndex], newOrder[experienceIndex]] = [newOrder[experienceIndex], newOrder[educationIndex]];
      setSectionOrder(newOrder);
    }
  };

  const renderSection = (sectionType: string) => {
    switch (sectionType) {
      case 'summary':
        return (
          <div key="summary" className="relative">
            <SectionEditor
              type="summary"
              data={safeResume.professional_summary}
              onUpdate={(data) => handleSectionUpdate('professional_summary', data)}
              fontConfig={fontConfig}
            />
          </div>
        );
      case 'work_experience':
        return safeResume.work_experience.map((experience: any, index: number) => (
          <div key={`work-${index}`} className="relative">
            <SectionEditor
              type="work_experience"
              data={experience}
              onUpdate={(data) => {
                const updatedExperience = [...safeResume.work_experience];
                updatedExperience[index] = data;
                handleSectionUpdate('work_experience', updatedExperience);
              }}
              onDelete={() => handleSectionDelete('work_experience', index)}
              fontConfig={fontConfig}
            />
          </div>
        ));
      case 'education':
        return safeResume.education.map((edu: any, index: number) => (
          <div key={`edu-${index}`} className="relative">
            <SectionEditor
              type="education"
              data={edu}
              onUpdate={(data) => {
                const updatedEducation = [...safeResume.education];
                updatedEducation[index] = data;
                handleSectionUpdate('education', updatedEducation);
              }}
              onDelete={() => handleSectionDelete('education', index)}
              fontConfig={fontConfig}
            />
          </div>
        ));
      case 'skills':
        return (
          <div key="skills" className="relative">
            <SectionEditor
              type="skills"
              data={safeResume.technical_skills}
              onUpdate={(data) => handleSectionUpdate('technical_skills', data)}
              fontConfig={fontConfig}
            />
          </div>
        );
      case 'other':
        return safeResume.other.map((other: any, index: number) => (
          <div key={`other-${index}`} className="relative">
            <SectionEditor
              type="other"
              data={other}
              onUpdate={(data) => {
                const updatedOther = [...safeResume.other];
                updatedOther[index] = data;
                handleSectionUpdate('other', updatedOther);
              }}
              onDelete={() => handleSectionDelete('other', index)}
              fontConfig={fontConfig}
            />
          </div>
        ));
      default:
        return null;
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-2 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-lg p-3 max-w-4xl mx-auto">
        {/* Header with controls */}
        <div className="flex justify-between items-center mb-2">
          <h1 className="text-lg font-bold text-gray-900">Resume Editor</h1>
          <div className="flex space-x-1">
            <button
              onClick={toggleSectionOrder}
              className={`px-2 py-1 rounded text-xs font-medium ${
                sectionOrder[2] === 'education'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Education First
            </button>
            <button
              onClick={toggleSectionOrder}
              className={`px-2 py-1 rounded text-xs font-medium ${
                sectionOrder[2] === 'work_experience'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Experience First
            </button>
            <PDFExportButton resume={resume} />
          </div>
        </div>

        {/* Font size indicator */}
        <div className="mb-2 p-2 bg-blue-50 rounded text-xs text-blue-700">
          üìè Auto-sizing: Header {fontConfig.headerFontSize}px, Body {fontConfig.bodyFontSize}px, Bullets {fontConfig.bulletFontSize}px
        </div>

        {/* Resume content - dynamically sized for single page */}
        <div className="space-y-0">
          {/* Personal Info - minimal header */}
          <div className="relative">
            <SectionEditor
              type="personal_info"
              data={safeResume.personal_info}
              onUpdate={(data) => handleSectionUpdate('personal_info', data)}
              fontConfig={fontConfig}
            />
          </div>

          {/* Render sections in order */}
          {sectionOrder.slice(1).map(sectionType => renderSection(sectionType))}
        </div>
      </div>
    </div>
  );
}
